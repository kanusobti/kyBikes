{"version":3,"sources":["Cities.js","App.js","serviceWorker.js","index.js"],"names":["Cities","calculateAvailableBikes","companies","companyIdArray","map","x","id","getCities","newArray","countBikes","countAvlSpaces","companyId","axios","method","url","responseType","then","resultNew","city","undefined","data","network","location","comp","company","length","e","stations","forEach","element","free_bikes","empty_slots","push","avlPercentage","Math","round","setState","cityBikeAvailability","selectedCity","loadCitiesForCountry","countryCode","state","apiResponse","filter","country","defaultCountry","countryArray","countries","params","fields","res","results","networks","cntry","Set","className","style","position","zIndex","src","this","alt","tabIndex","onClick","color","fontSize","isNaN","textDecoration","Component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b4a4d8f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\n\r\nclass Cities extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cityBikeAvailability: [],\r\n      selectedCity: \"\",\r\n      countryArray: [],\r\n      apiResponse: [],\r\n      defaultCountry: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let countries = [];\r\n    let companies = [];\r\n    //this is making api calls with axios\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://api.citybik.es/v2/networks\",\r\n      responseType: \"json\",\r\n      params: {\r\n        fields: \"id,name,location\"\r\n      }\r\n    }).then(res => {\r\n      //   console.log(res.data.networks);\r\n      const results = res.data.networks;\r\n\r\n      countries = res.data.networks.map(cntry => cntry.location.country);\r\n      //   console.log(countries);\r\n      countries = [...new Set(countries)];\r\n      companies = res.data.networks.filter(\r\n        x => x.location.country === countries[0]\r\n      );\r\n      ////this changes the initial state to the value we get back from the api call\r\n      //   console.log(companies);\r\n      this.setState({\r\n        countryArray: countries,\r\n        defaultCountry: countries[0],\r\n        apiResponse: results\r\n      });\r\n      this.calculateAvailableBikes(companies);\r\n    });\r\n  }\r\n\r\n  calculateAvailableBikes = companies => {\r\n    let companyIdArray = companies.map(x => x.id);\r\n    this.getCities(companyIdArray);\r\n  };\r\n\r\n  getCities = companyIdArray => {\r\n    const newArray = [];\r\n    let avlRentals = [];\r\n    const bikeAvlArray = [];\r\n    let countBikes = 0;\r\n    let countAvlSpaces = 0;\r\n    companyIdArray.map(companyId => {\r\n      axios({\r\n        method: \"get\",\r\n        url: `http://api.citybik.es/v2/networks/${companyId}`,\r\n        responseType: \"json\"\r\n      }).then(resultNew => {\r\n        // console.log(resultNew);\r\n        let city =\r\n          resultNew.data.network.location === undefined ||\r\n          resultNew.data.network.location === null ||\r\n          typeof resultNew.data.network.location === \"string\"\r\n            ? \"\"\r\n            : resultNew.data.network.location.city;\r\n        let comp =\r\n          resultNew.data.network.company === undefined ||\r\n          resultNew.data.network.company === null ||\r\n          typeof resultNew.data.network.company === \"string\" //Handle Issues with Bad API data quality\r\n            ? [\"Not Found\"]\r\n            : resultNew.data.network.company.length === 0\r\n            ? [\"Not Found\"]\r\n            : resultNew.data.network.company.map(e => e);\r\n        let availability = resultNew.data.network.stations.forEach(element => {\r\n          countBikes += element.free_bikes;\r\n          countAvlSpaces += element.empty_slots;\r\n        });\r\n\r\n        newArray.push({\r\n          city: city,\r\n          countBikes: countBikes,\r\n          countAvlSpaces: countAvlSpaces,\r\n          avlPercentage:\r\n            countAvlSpaces === 0\r\n              ? 0\r\n              : Math.round((countBikes / countAvlSpaces) * 100),\r\n          companies: comp\r\n        });\r\n        this.setState({\r\n          cityBikeAvailability: newArray,\r\n          selectedCity: newArray[0].city\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  loadCitiesForCountry = countryCode => {\r\n    let companies = this.state.apiResponse.filter(\r\n      x => x.location.country === countryCode\r\n    );\r\n    this.setState({\r\n      defaultCountry: countryCode\r\n    });\r\n    this.calculateAvailableBikes(companies);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <div className=\"headerImage\">\r\n            <img\r\n              style={{ position: \"relative\", zIndex: 10 }}\r\n              src={`https://www.countryflags.io/${\r\n                this.state.defaultCountry === \"UK\"\r\n                  ? \"GB\"\r\n                  : this.state.defaultCountry\r\n              }/flat/64.png`}\r\n              alt={`Flag Image for ${this.state.defaultCountry}-country`}\r\n            />\r\n          </div>\r\n        </header>\r\n        <div className=\"main\">\r\n          <div className=\"sideBar\">\r\n            {this.state.countryArray.map(cntry => {\r\n              return (\r\n                <div className=\"flags\" tabIndex={cntry}>\r\n                  <img\r\n                    style={{ position: \"relative\", zIndex: 10 }}\r\n                    onClick={() => {\r\n                      this.loadCitiesForCountry(cntry);\r\n                    }}\r\n                    src={`https://www.countryflags.io/${\r\n                      cntry === \"UK\" ? \"GB\" : cntry\r\n                    }/flat/64.png`}\r\n                    alt={`Flag Image for ${cntry}-country`}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"content\">\r\n            <div className=\"cities wrapper\">\r\n              {this.state.cityBikeAvailability.map(city => {\r\n                return (\r\n                  <div className=\"finalContainer\">\r\n                    <h1 className=\"cityName\">{city.city}</h1>\r\n                    <div className=\"availability\">\r\n                      <span className=\"availabilityHeading\">\r\n                        Availability:{\" \"}\r\n                      </span>\r\n\r\n                      <span\r\n                        style={{\r\n                          color:\r\n                            city.avlPercentage < 25 ? \"#CC2936\" : \"#388697\",\r\n                          fontSize: 50\r\n                        }}\r\n                      >\r\n                        {city.avlPercentage.isNaN ? 0 : city.avlPercentage} %\r\n                      </span>\r\n                    </div>\r\n\r\n                    <div className=\"companies\">\r\n                      <span className=\"companiesHeader\">Companies:</span>\r\n                      <span\r\n                        style={{\r\n                          color:\r\n                            city.avlPercentage < 25 ? \"#CC2936\" : \"#388697\",\r\n                          textDecoration: \"none\"\r\n                        }}\r\n                      >\r\n                        {\" \"}\r\n                        {city.countBikes} Bikes/{city.countAvlSpaces} Spots\r\n                      </span>\r\n                    </div>\r\n                    {city.companies.map(comp => {\r\n                      return <h4>{comp}</h4>;\r\n                    })}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cities;\r\n","import React, { Component } from \"react\";\n// import './App.css';\nimport \"./styles/App.scss\";\nimport axios from \"axios\";\nimport Cities from \"./Cities\";\n\nclass App extends Component {\n  ///this s the constructor method. it is run once at the beginning of the component lifecycle. it is used to set initial state\n  render() {\n    return (\n      <div className=\"App\">        \n        <Cities />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}